// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  status        String    @default("PENDING_VERIFICATION")
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  usageRecords  Usage[]
  monthlyUsage  Int       @default(0)
  totalUsage    Int       @default(0)
  activities    UserActivity[]
  adminAuditLogs AdminAuditLog[]  @relation("AdminAuditLogs")
  targetAuditLogs AdminAuditLog[] @relation("TargetAuditLogs")
  lastActive    DateTime?
  recentActivity Json[]   @default([])
  stripeCustomerId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Subscription {
  id           String           @id @default(cuid())
  userId       String           @unique
  user         User             @relation(fields: [userId], references: [id])
  tier         SubscriptionTier @default(FREE)
  monthlyLimit Int              @default(100)
  tokenLimit   Int              @default(1000)
  isActive     Boolean          @default(true)
  startDate    DateTime         @default(now())
  endDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([userId])
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  amount    Int      @default(0)
  tokens    Int      @default(0)
  cost      Float
  createdAt DateTime @default(now())

  @@index([userId])
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean   @default(true)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GroqKeyPool {
  id        String    @id @default(cuid())
  key       String    @unique
  isInUse   Boolean   @default(false)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserActivity {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  activityType String
  details      Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model AdminAuditLog {
  id             String    @id @default(cuid())
  admin          User      @relation("AdminAuditLogs", fields: [adminId], references: [id])
  adminId        String
  actionType     String
  details        Json?
  targetUser     User?     @relation("TargetAuditLogs", fields: [targetUserId], references: [id])
  targetUserId   String?
  targetResource String?
  createdAt      DateTime  @default(now())

  @@index([adminId])
  @@index([targetUserId])
  @@index([createdAt])
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}
